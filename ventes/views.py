# ==================== ventes/views.py ====================
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse, Http404
from django.db.models import Q, Count, Prefetch
from django.utils import timezone
from datetime import datetime, timedelta, date
from .models import Checklist, ItemChecklist, CategorieObjet, ObjetChecklist, Soumission
from django.contrib import messages
import json
from hotel.models import Contrat, PhotoContrat, HistoriqueContrat
from django.contrib.auth import get_user_model
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.conf import settings
from collections import defaultdict

User = get_user_model()

# ============ FONCTION HELPER POUR REDIRECTIONS ============
def get_user_dashboard_redirect(user):
    """Retourne l'objet redirect appropri√© selon le r√¥le de l'utilisateur"""
    print(f"üîç DEBUG get_user_dashboard_redirect - Role: {user.role}, Username: {user.username}")
    
    if user.role == 'resp_ventes':
        print("‚úÖ Redirection vers dashboard_responsable")
        return redirect('ventes:dashboard_responsable')
    elif user.role == 'vendeur':
        print("‚úÖ Redirection vers dashboard_vendeuse")
        return redirect('ventes:dashboard_vendeuse')
    else:
        # Pour les autres r√¥les, utiliser la m√©thode du mod√®le
        dashboard_url = user.get_dashboard_url()
        print(f"‚úÖ Redirection vers {dashboard_url}")
        return redirect(dashboard_url)

@login_required
def dashboard_vendeuse(request):
    """Dashboard principal avec calendrier et pagination"""
    today = timezone.now().date()
    start_date = today.replace(day=1)
    
    if start_date.month == 12:
        end_date = start_date.replace(year=start_date.year + 1, month=1, day=1) - timedelta(days=1)
    else:
        end_date = start_date.replace(month=start_date.month + 1, day=1) - timedelta(days=1)
    
    # Checklists du mois pour le calendrier
    checklists_mois = Checklist.objects.filter(
        date_evenement__gte=start_date,
        date_evenement__lte=end_date
    ).select_related('creee_par').prefetch_related('items')
    
    # TOUTES les checklists pour le tableau
    all_checklists = Checklist.objects.select_related(
        'creee_par', 'contrat'
    ).prefetch_related('items').order_by('-date_evenement')
    
    checklists_par_date = {}
    for checklist in checklists_mois:
        date_str = checklist.date_evenement.strftime('%Y-%m-%d')
        if date_str not in checklists_par_date:
            checklists_par_date[date_str] = []
        checklists_par_date[date_str].append({
            'id': str(checklist.id),
            'name': checklist.numero_commande,
            'isMine': checklist.creee_par == request.user,
            'progression': checklist.progression()
        })
    
    # R√©cup√©rer tous les contrats
    contrats = Contrat.objects.select_related(
        'maitre_hotel', 'cree_par'
    ).order_by('-date_evenement')
    
    # Liste des ma√Ætres d'h√¥tel pour les filtres
    maitres_hotel = User.objects.filter(role='maitre_hotel', is_active=True)
    
    # R√©cup√©rer toutes les soumissions
    soumissions = Soumission.objects.select_related(
        'cree_par'
    ).order_by('-date_evenement')
    
    context = {
        'checklists_data': json.dumps(checklists_par_date),
        'all_checklists': all_checklists,
        'contrats': contrats,
        'maitres_hotel': maitres_hotel,
        'soumissions': soumissions,
        'today': today.strftime('%Y-%m-%d'),
    }
    
    return render(request, 'ventes/vendeuse/dashboard.html', context)

@login_required
def checklists_by_date(request, date):
    """Liste des checklists pour une date donn√©e"""
    try:
        date_obj = datetime.strptime(date, '%Y-%m-%d').date()
    except ValueError:
        messages.error(request, "Date invalide")
        return redirect('ventes:dashboard_vendeuse')
    
    # Filtrer selon l'onglet (all ou mine)
    view_type = request.GET.get('view', 'all')
    
    checklists = Checklist.objects.filter(date_evenement=date_obj)
    
    if view_type == 'mine':
        checklists = checklists.filter(creee_par=request.user)
    
    checklists = checklists.select_related('creee_par').prefetch_related('items')
    
    context = {
        'date': date_obj,
        'checklists': checklists,
        'view_type': view_type,
    }
    
    return render(request, 'ventes/vendeuse/checklists_date.html', context)

@login_required
def checklist_detail(request, pk):
    """D√©tail d'une checklist avec possibilit√© de validation"""
    checklist = get_object_or_404(
        Checklist.objects.select_related('creee_par', 'verificateur'),
        pk=pk
    )
    
    items = checklist.items.select_related(
        'objet__categorie', 
        'verifie_par'
    ).order_by('objet__categorie__ordre', 'objet__nom')
    
    # Grouper par cat√©gorie
    items_par_categorie = {}
    for item in items:
        cat_nom = item.objet.categorie.nom
        if cat_nom not in items_par_categorie:
            items_par_categorie[cat_nom] = []
        items_par_categorie[cat_nom].append(item)
    
    # Calculer les statistiques
    total_items = items.count()
    verified_items = items.filter(statut_verification='valide').count()
    pending_items = total_items - verified_items
    
    # V√©rifier les permissions
    can_edit = (
        checklist.creee_par == request.user or 
        request.user.groups.filter(name__in=['Responsable', 'Checklist']).exists()
    )
    
    context = {
        'checklist': checklist,
        'items_par_categorie': items_par_categorie,
        'can_edit': can_edit,
        'total_items': total_items,
        'verified_items': verified_items,
        'pending_items': pending_items,
    }
    
    return render(request, 'ventes/vendeuse/checklist_detail.html', context)

@login_required
def checklist_create(request):
    """Cr√©er une nouvelle checklist"""
    categories = CategorieObjet.objects.prefetch_related(
        Prefetch('objets', queryset=ObjetChecklist.objects.filter(actif=True))
    ).filter(objets__actif=True).distinct()
    
    if request.method == 'POST':
        nom = request.POST.get('nom')
        numero_commande_brut = request.POST.get('numero_commande', '').strip()
        date_evenement = request.POST.get('date_evenement')
        notes = request.POST.get('notes', '')
        items_data = request.POST.getlist('items[]')
        
        # Formater le num√©ro de commande
        if numero_commande_brut:
            numero_sans_prefix = numero_commande_brut.replace('CMD-', '').strip()
            numero_commande = f"CMD-{numero_sans_prefix}"
        else:
            numero_commande = ''
        
        # V√©rifier que les champs obligatoires sont pr√©sents
        if not nom or not numero_commande or not date_evenement:
            messages.error(request, "Veuillez remplir tous les champs obligatoires.")
            context = {
                'categories': categories,
                'form_data': {
                    'nom': nom,
                    'numero_commande': numero_commande_brut,
                    'date_evenement': date_evenement,
                    'notes': notes
                }
            }
            return render(request, 'ventes/vendeuse/checklist_create.html', context)
        
        # V√©rifier si le num√©ro de commande existe d√©j√†
        if Checklist.objects.filter(numero_commande=numero_commande).exists():
            messages.error(request, f"Une checklist avec le num√©ro {numero_commande} existe d√©j√†.")
            context = {
                'categories': categories,
                'form_data': {
                    'nom': nom,
                    'numero_commande': numero_commande_brut,
                    'date_evenement': date_evenement,
                    'notes': notes
                }
            }
            return render(request, 'ventes/vendeuse/checklist_create.html', context)
        
        try:
            # Cr√©er la checklist
            checklist = Checklist.objects.create(
                nom=nom,
                numero_commande=numero_commande,
                creee_par=request.user,
                date_evenement=date_evenement,
                notes=notes,
                status='brouillon'
            )
            
            # Ajouter les items avec leurs commentaires
            for item_str in items_data:
                try:
                    objet_id, quantite = item_str.split(':')
                    
                    # R√©cup√©rer le commentaire pour cet objet (s'il existe)
                    comment_key = f'comment_{objet_id}'
                    comment = request.POST.get(comment_key, '')
                    
                    ItemChecklist.objects.create(
                        checklist=checklist,
                        objet_id=int(objet_id),
                        quantite=float(quantite),
                        notes=comment  # Sauvegarder le commentaire
                    )
                except (ValueError, IndexError) as e:
                    print(f"Erreur parsing item {item_str}: {e}")
                    continue
            
            messages.success(request, f"‚úÖ Checklist {numero_commande} cr√©√©e avec succ√®s!")
            return redirect('ventes:checklist_detail', pk=checklist.pk)
        
        except Exception as e:
            messages.error(request, f"Erreur lors de la cr√©ation: {str(e)}")
            print(f"ERROR: {e}")
            import traceback
            traceback.print_exc()
    
    context = {
        'categories': categories,
    }
    
    return render(request, 'ventes/vendeuse/checklist_create.html', context)
@login_required
def checklist_edit(request, pk):
    """Modifier une checklist"""
    checklist = get_object_or_404(Checklist, pk=pk)
    
    # V√©rifier les permissions
    if (checklist.creee_par != request.user and 
        not request.user.groups.filter(name__in=['Responsable', 'Checklist']).exists()):
        messages.error(request, "Vous n'avez pas la permission de modifier cette checklist")
        return redirect('ventes:checklist_detail', pk=pk)
    
    categories = CategorieObjet.objects.prefetch_related(
        Prefetch('objets', queryset=ObjetChecklist.objects.filter(actif=True))
    ).filter(objets__actif=True).distinct()
    
    items = checklist.items.select_related('objet__categorie')
    
    if request.method == 'POST':
        nom = request.POST.get('nom')
        numero_commande_brut = request.POST.get('numero_commande', '').strip()
        date_evenement = request.POST.get('date_evenement')
        notes = request.POST.get('notes', '')
        items_data = request.POST.getlist('items[]')
        
        # Formater le num√©ro de commande
        if numero_commande_brut:
            numero_sans_prefix = numero_commande_brut.replace('CMD-', '').strip()
            numero_commande = f"CMD-{numero_sans_prefix}"
        else:
            numero_commande = ''
        
        # V√©rifier les champs obligatoires
        if not nom or not numero_commande or not date_evenement:
            messages.error(request, "Veuillez remplir tous les champs obligatoires.")
            context = {
                'checklist': checklist,
                'categories': categories,
                'items': items,
            }
            return render(request, 'ventes/vendeuse/checklist_edit.html', context)
        
        # V√©rifier si le num√©ro de commande existe (sauf pour la checklist actuelle)
        if Checklist.objects.filter(numero_commande=numero_commande).exclude(pk=pk).exists():
            messages.error(request, f"Une autre checklist avec le num√©ro {numero_commande} existe d√©j√†.")
            context = {
                'checklist': checklist,
                'categories': categories,
                'items': items,
            }
            return render(request, 'ventes/vendeuse/checklist_edit.html', context)
        
        try:
            # Mettre √† jour les informations de base de la checklist
            checklist.nom = nom
            checklist.numero_commande = numero_commande
            checklist.date_evenement = date_evenement
            checklist.notes = notes
            checklist.save()
            
            # Convertir les nouvelles donn√©es en dictionnaire {objet_id: quantite}
            new_items = {}
            for item_str in items_data:
                try:
                    objet_id, quantite = item_str.split(':')
                    new_items[int(objet_id)] = float(quantite)
                except (ValueError, IndexError):
                    continue
            
            # R√©cup√©rer les items existants
            existing_items = {item.objet_id: item for item in checklist.items.all()}
            
            # 1. Mettre √† jour ou supprimer les items existants
            for objet_id, item in existing_items.items():
                if objet_id in new_items:
                    # Item existe toujours, mettre √† jour la quantit√© si n√©cessaire
                    nouvelle_quantite = new_items[objet_id]
                    if item.quantite != nouvelle_quantite:
                        item.quantite = nouvelle_quantite
                        item.save()
                else:
                    # Item n'est plus dans la liste
                    if item.statut_verification in ['valide', 'refuse']:
                        messages.warning(
                            request, 
                            f"‚ö†Ô∏è L'item '{item.objet.nom}' n'a pas √©t√© supprim√© car il a d√©j√† √©t√© {item.get_statut_verification_display().lower()}."
                        )
                    else:
                        item.delete()
            
            # 2. Ajouter les nouveaux items
            for objet_id, quantite in new_items.items():
                if objet_id not in existing_items:
                    ItemChecklist.objects.create(
                        checklist=checklist,
                        objet_id=objet_id,
                        quantite=quantite
                    )
            
            messages.success(request, "‚úÖ Checklist modifi√©e avec succ√®s!")
            return redirect('ventes:checklist_detail', pk=pk)
        
        except Exception as e:
            messages.error(request, f"Erreur lors de la modification: {str(e)}")
            print(f"ERROR: {e}")
            import traceback
            traceback.print_exc()
    
    context = {
        'checklist': checklist,
        'categories': categories,
        'items': items,
    }
    
    return render(request, 'ventes/vendeuse/checklist_edit.html', context)

@login_required
def checklist_delete(request, pk):
    """Supprimer une checklist"""
    checklist = get_object_or_404(Checklist, pk=pk)
    
    # V√©rifier les permissions
    if (checklist.creee_par != request.user and 
        not request.user.groups.filter(name__in=['Responsable', 'Checklist']).exists()):
        messages.error(request, "Vous n'avez pas la permission de supprimer cette checklist")
        return redirect('ventes:checklist_detail', pk=pk)
    
    if request.method == 'POST':
        numero_commande = checklist.numero_commande
        checklist.delete()
        messages.success(request, f"Checklist {numero_commande} supprim√©e avec succ√®s!")
        return get_user_dashboard_redirect(request.user)
    
    return render(request, 'ventes/vendeuse/checklist_confirm_delete.html', {'checklist': checklist})

@login_required
def checklist_duplicate(request, pk):
    """Dupliquer une checklist"""
    original = get_object_or_404(Checklist, pk=pk)
    
    # G√©n√©rer un nouveau num√©ro unique
    base_num = f"{original.numero_commande} - Copie"
    numero_commande = base_num
    counter = 1
    
    while Checklist.objects.filter(numero_commande=numero_commande).exists():
        numero_commande = f"{base_num} {counter}"
        counter += 1
    
    try:
        # Cr√©er une copie
        nouvelle_checklist = Checklist.objects.create(
            numero_commande=numero_commande,
            nom=f"{original.nom} - Copie",
            creee_par=request.user,
            date_evenement=original.date_evenement,
            notes=original.notes,
            status='en_preparation'
        )
        
        # Copier les items
        for item in original.items.all():
            ItemChecklist.objects.create(
                checklist=nouvelle_checklist,
                objet=item.objet,
                quantite=item.quantite
            )
        
        messages.success(request, f"Checklist dupliqu√©e avec succ√®s! Nouveau num√©ro: {nouvelle_checklist.numero_commande}")
        return redirect('ventes:checklist_detail', pk=nouvelle_checklist.pk)
    
    except Exception as e:
        messages.error(request, f"Erreur lors de la duplication: {str(e)}")
        return redirect('ventes:checklist_detail', pk=pk)

@login_required
def toggle_item_validation(request, pk):
    """Toggle validation d'un item (AJAX)"""
    if request.method == 'POST':
        item = get_object_or_404(ItemChecklist, pk=pk)
        
        # Toggle la validation
        item.verifie = not item.verifie
        if item.verifie:
            item.date_verification = timezone.now()
            item.verifie_par = request.user
        else:
            item.date_verification = None
            item.verifie_par = None
        item.save()
        
        # V√©rifier si toute la checklist est compl√©t√©e
        checklist = item.checklist
        all_valid = all(i.verifie for i in checklist.items.all())
        
        # Mettre √† jour le statut
        if all_valid:
            checklist.status = 'validee'
            checklist.verificateur = request.user
            checklist.date_verification = timezone.now()
        else:
            checklist.status = 'en_cours'
        checklist.save()
        
        return JsonResponse({
            'success': True,
            'verifie': item.verifie,
            'progression': checklist.progression(),
            'status': checklist.status
        })
    
    return JsonResponse({'success': False, 'error': 'M√©thode non autoris√©e'}, status=400)

@login_required
def update_item_quantity(request, pk):
    """Mettre √† jour la quantit√© d'un item (AJAX)"""
    if request.method == 'POST':
        item = get_object_or_404(ItemChecklist, pk=pk)
        
        try:
            quantite = int(request.POST.get('quantite', 1))
            
            if quantite > 0:
                item.quantite = quantite
                item.save()
                return JsonResponse({
                    'success': True, 
                    'quantite': quantite
                })
            else:
                return JsonResponse({
                    'success': False, 
                    'error': 'La quantit√© doit √™tre sup√©rieure √† 0'
                }, status=400)
        
        except ValueError:
            return JsonResponse({
                'success': False, 
                'error': 'Quantit√© invalide'
            }, status=400)
    
    return JsonResponse({'success': False, 'error': 'M√©thode non autoris√©e'}, status=400)

@login_required
def dashboard_responsable(request):
    """Dashboard pour les responsables ventes"""
    
    # V√©rifier que l'utilisateur est responsable ventes
    if request.user.role != 'resp_ventes':
        messages.error(request, "Acc√®s r√©serv√© aux responsables ventes")
        return get_user_dashboard_redirect(request.user)
    
    # R√©cup√©rer toutes les checklists
    checklists = Checklist.objects.select_related(
        'creee_par'
    ).order_by('-date_evenement')[:50]
    
    # R√©cup√©rer tous les objets
    objets = ObjetChecklist.objects.select_related(
        'categorie'
    ).order_by('categorie__ordre', 'ordre', 'nom')
    
    # R√©cup√©rer toutes les cat√©gories avec le nombre d'objets
    categories = CategorieObjet.objects.annotate(
        objets_count=Count('objets')
    ).order_by('ordre', 'nom')
    
    # R√©cup√©rer toutes les vendeuses (role = vendeur)
    vendeuses = User.objects.filter(
        role='vendeur'
    ).annotate(
        checklists_count=Count('checklists_creees')
    ).order_by('first_name', 'last_name')
    
    # R√©cup√©rer tous les contrats
    contrats = Contrat.objects.select_related(
        'maitre_hotel', 'cree_par'
    ).order_by('-date_evenement')

    contrats_by_date = {}
    for contrat in contrats:
        date_key = contrat.date_evenement.strftime('%Y-%m-%d')
        if date_key not in contrats_by_date:
            contrats_by_date[date_key] = []
        contrats_by_date[date_key].append(contrat)
    
    # Organiser les checklists par date pour le calendrier
    checklists_by_date = defaultdict(list)
    all_checklists = Checklist.objects.select_related('creee_par').all()
    
    for checklist in all_checklists:
        date_str = checklist.date_evenement.strftime('%Y-%m-%d')
        checklists_by_date[date_str].append(checklist)

    soumissions = Soumission.objects.select_related('cree_par').order_by('-date_evenement')
    
    # Organiser les soumissions par date pour le calendrier
    soumissions_by_date = {}
    for soumission in soumissions:
        date_key = soumission.date_evenement.strftime('%Y-%m-%d')
        if date_key not in soumissions_by_date:
            soumissions_by_date[date_key] = []
        soumissions_by_date[date_key].append(soumission)
    
    # Statistiques
    stats = {
        'total_checklists': Checklist.objects.count(),
        'total_objets': ObjetChecklist.objects.filter(actif=True).count(),
        'total_categories': CategorieObjet.objects.filter(actif=True).count(),
        'total_vendeuses': User.objects.filter(role='vendeur', is_active=True).count(),
        'total_soumissions': Soumission.objects.count(),
    }
    
    context = {
        'checklists': checklists,
        'objets': objets,
        'categories': categories,
        'vendeuses': vendeuses,
        'contrats': contrats,
        'soumissions': soumissions,
        'stats': stats,
        'checklists_by_date': dict(checklists_by_date),
        'today': date.today().strftime('%Y-%m-%d'),
        'contrats_by_date': contrats_by_date,
        'soumissions_by_date': soumissions_by_date,
    }
    
    return render(request, 'ventes/responsable/dashboard_responsable.html', context)

# ============ CRUD OBJETS ============

@login_required
def objet_create(request):
    """Cr√©er un nouvel objet"""
    if request.user.role != 'resp_ventes':
        messages.error(request, "Acc√®s r√©serv√© aux responsables ventes")
        return get_user_dashboard_redirect(request.user)
    
    categories = CategorieObjet.objects.filter(actif=True).order_by('ordre', 'nom')
    
    if request.method == 'POST':
        nom = request.POST.get('nom')
        categorie_id = request.POST.get('categorie')
        unite = request.POST.get('unite', 'unit√©')
        description = request.POST.get('description', '')
        ordre = request.POST.get('ordre', 0)
        actif = request.POST.get('actif') == 'on'
        
        if not nom or not categorie_id:
            messages.error(request, "Veuillez remplir tous les champs obligatoires")
            return render(request, 'ventes/responsable/objet_form.html', {
                'categories': categories,
                'form': request.POST
            })
        
        try:
            ObjetChecklist.objects.create(
                nom=nom,
                categorie_id=categorie_id,
                unite=unite,
                description=description,
                ordre=int(ordre),
                actif=actif
            )
            messages.success(request, f"Objet '{nom}' cr√©√© avec succ√®s!")
            return redirect('ventes:dashboard_responsable')
        except Exception as e:
            messages.error(request, f"Erreur lors de la cr√©ation: {str(e)}")
    
    return render(request, 'ventes/responsable/objet_form.html', {'categories': categories})

@login_required
def objet_edit(request, pk):
    """Modifier un objet"""
    if request.user.role != 'resp_ventes':
        messages.error(request, "Acc√®s r√©serv√© aux responsables ventes")
        return get_user_dashboard_redirect(request.user)
    
    objet = get_object_or_404(ObjetChecklist, pk=pk)
    categories = CategorieObjet.objects.filter(actif=True).order_by('ordre', 'nom')
    
    if request.method == 'POST':
        nom = request.POST.get('nom')
        categorie_id = request.POST.get('categorie')
        unite = request.POST.get('unite', 'unit√©')
        description = request.POST.get('description', '')
        ordre = request.POST.get('ordre', 0)
        actif = request.POST.get('actif') == 'on'
        
        if not nom or not categorie_id:
            messages.error(request, "Veuillez remplir tous les champs obligatoires")
            return render(request, 'ventes/responsable/objet_form.html', {
                'objet': objet,
                'categories': categories,
                'form': request.POST
            })
        
        try:
            objet.nom = nom
            objet.categorie_id = categorie_id
            objet.unite = unite
            objet.description = description
            objet.ordre = int(ordre)
            objet.actif = actif
            objet.save()
            
            messages.success(request, f"Objet '{nom}' modifi√© avec succ√®s!")
            return redirect('ventes:dashboard_responsable')
        except Exception as e:
            messages.error(request, f"Erreur lors de la modification: {str(e)}")
    
    form_data = {
        'nom': {'value': objet.nom},
        'categorie': {'value': objet.categorie_id},
        'unite': {'value': objet.unite},
        'description': {'value': objet.description},
        'ordre': {'value': objet.ordre},
        'actif': {'value': objet.actif},
    }
    
    return render(request, 'ventes/responsable/objet_form.html', {
        'objet': objet,
        'categories': categories,
        'form': form_data
    })

@login_required
def objet_delete(request, pk):
    """Supprimer un objet"""
    if request.user.role != 'resp_ventes':
        messages.error(request, "Acc√®s r√©serv√© aux responsables ventes")
        return get_user_dashboard_redirect(request.user)
    
    objet = get_object_or_404(ObjetChecklist, pk=pk)
    
    if request.method == 'POST':
        nom = objet.nom
        objet.delete()
        messages.success(request, f"Objet '{nom}' supprim√© avec succ√®s!")
        return redirect('ventes:dashboard_responsable')
    
    return render(request, 'ventes/responsable/objet_confirm_delete.html', {'objet': objet})

# ============ CRUD CAT√âGORIES ============

@login_required
def categorie_create(request):
    """Cr√©er une nouvelle cat√©gorie"""
    if request.user.role != 'resp_ventes':
        messages.error(request, "Acc√®s r√©serv√© aux responsables ventes")
        return get_user_dashboard_redirect(request.user)
    
    colors = [
        ('slate', 'Ardoise'), ('red', 'Rouge'), ('orange', 'Orange'),
        ('amber', 'Ambre'), ('yellow', 'Jaune'), ('lime', 'Citron vert'),
        ('green', 'Vert'), ('emerald', '√âmeraude'), ('teal', 'Sarcelle'),
        ('cyan', 'Cyan'), ('sky', 'Ciel'), ('blue', 'Bleu'),
        ('indigo', 'Indigo'), ('violet', 'Violet'), ('purple', 'Violet fonc√©'),
        ('fuchsia', 'Fuchsia'), ('pink', 'Rose'), ('rose', 'Rose fonc√©'),
    ]
    
    if request.method == 'POST':
        nom = request.POST.get('nom')
        icone = request.POST.get('icone', '')
        couleur = request.POST.get('couleur', 'slate')
        ordre = request.POST.get('ordre', 0)
        actif = request.POST.get('actif') == 'on'
        
        if not nom:
            messages.error(request, "Le nom est obligatoire")
            return render(request, 'ventes/responsable/categorie_form.html', {
                'colors': colors,
                'form': request.POST
            })
        
        try:
            CategorieObjet.objects.create(
                nom=nom,
                icone=icone,
                couleur=couleur,
                ordre=int(ordre),
                actif=actif
            )
            messages.success(request, f"Cat√©gorie '{nom}' cr√©√©e avec succ√®s!")
            return redirect('ventes:dashboard_responsable')
        except Exception as e:
            messages.error(request, f"Erreur lors de la cr√©ation: {str(e)}")
    
    return render(request, 'ventes/responsable/categorie_form.html', {'colors': colors})

@login_required
def categorie_edit(request, pk):
    """Modifier une cat√©gorie"""
    if request.user.role != 'resp_ventes':
        messages.error(request, "Acc√®s r√©serv√© aux responsables ventes")
        return get_user_dashboard_redirect(request.user)
    
    categorie = get_object_or_404(CategorieObjet, pk=pk)
    colors = [
        ('slate', 'Ardoise'), ('red', 'Rouge'), ('orange', 'Orange'),
        ('amber', 'Ambre'), ('yellow', 'Jaune'), ('lime', 'Citron vert'),
        ('green', 'Vert'), ('emerald', '√âmeraude'), ('teal', 'Sarcelle'),
        ('cyan', 'Cyan'), ('sky', 'Ciel'), ('blue', 'Bleu'),
        ('indigo', 'Indigo'), ('violet', 'Violet'), ('purple', 'Violet fonc√©'),
        ('fuchsia', 'Fuchsia'), ('pink', 'Rose'), ('rose', 'Rose fonc√©'),
    ]
    
    if request.method == 'POST':
        nom = request.POST.get('nom')
        icone = request.POST.get('icone', '')
        couleur = request.POST.get('couleur', 'slate')
        ordre = request.POST.get('ordre', 0)
        actif = request.POST.get('actif') == 'on'
        
        if not nom:
            messages.error(request, "Le nom est obligatoire")
            return render(request, 'ventes/responsable/categorie_form.html', {
                'categorie': categorie,
                'colors': colors,
                'form': request.POST
            })
        
        try:
            categorie.nom = nom
            categorie.icone = icone
            categorie.couleur = couleur
            categorie.ordre = int(ordre)
            categorie.actif = actif
            categorie.save()
            
            messages.success(request, f"Cat√©gorie '{nom}' modifi√©e avec succ√®s!")
            return redirect('ventes:dashboard_responsable')
        except Exception as e:
            messages.error(request, f"Erreur lors de la modification: {str(e)}")
    
    form_data = {
        'nom': {'value': categorie.nom},
        'icone': {'value': categorie.icone},
        'couleur': {'value': categorie.couleur},
        'ordre': {'value': categorie.ordre},
        'actif': {'value': categorie.actif},
    }
    
    return render(request, 'ventes/responsable/categorie_form.html', {
        'categorie': categorie,
        'colors': colors,
        'form': form_data
    })

@login_required
def categorie_delete(request, pk):
    """Supprimer une cat√©gorie"""
    if request.user.role != 'resp_ventes':
        messages.error(request, "Acc√®s r√©serv√© aux responsables ventes")
        return get_user_dashboard_redirect(request.user)
    
    categorie = get_object_or_404(CategorieObjet, pk=pk)
    
    if request.method == 'POST':
        if categorie.objets.exists():
            messages.error(request, "Impossible de supprimer une cat√©gorie contenant des objets")
            return redirect('ventes:dashboard_responsable')
        
        nom = categorie.nom
        categorie.delete()
        messages.success(request, f"Cat√©gorie '{nom}' supprim√©e avec succ√®s!")
        return redirect('ventes:dashboard_responsable')
    
    return render(request, 'ventes/responsable/categorie_confirm_delete.html', {'categorie': categorie})

# ============ CRUD VENDEUSES ============

@login_required
def vendeuse_create(request):
    """Cr√©er une nouvelle vendeuse"""
    if request.user.role != 'resp_ventes':
        messages.error(request, "Acc√®s r√©serv√© aux responsables ventes")
        return get_user_dashboard_redirect(request.user)
    
    if request.method == 'POST':
        username = request.POST.get('username')
        first_name = request.POST.get('first_name')
        last_name = request.POST.get('last_name')
        email = request.POST.get('email')
        password1 = request.POST.get('password1')
        password2 = request.POST.get('password2')
        is_active = request.POST.get('is_active') == 'on'
        
        # Validation
        if not all([username, first_name, last_name, email, password1, password2]):
            messages.error(request, "Veuillez remplir tous les champs obligatoires")
            return render(request, 'ventes/responsable/vendeuse_form.html', {'form': request.POST})
        
        if password1 != password2:
            messages.error(request, "Les mots de passe ne correspondent pas")
            return render(request, 'ventes/responsable/vendeuse_form.html', {'form': request.POST})
        
        if len(password1) < 8:
            messages.error(request, "Le mot de passe doit contenir au moins 8 caract√®res")
            return render(request, 'ventes/responsable/vendeuse_form.html', {'form': request.POST})
        
        if User.objects.filter(username=username).exists():
            messages.error(request, "Ce nom d'utilisateur existe d√©j√†")
            return render(request, 'ventes/responsable/vendeuse_form.html', {'form': request.POST})
        
        if User.objects.filter(email=email).exists():
            messages.error(request, "Cet email est d√©j√† utilis√©")
            return render(request, 'ventes/responsable/vendeuse_form.html', {'form': request.POST})
        
        try:
            user = User.objects.create_user(
                username=username,
                email=email,
                password=password1,
                first_name=first_name,
                last_name=last_name,
                is_active=is_active,
                role='vendeur'
            )
            
            messages.success(request, f"Vendeuse '{user.get_full_name()}' cr√©√©e avec succ√®s!")
            return redirect('ventes:dashboard_responsable')
        except Exception as e:
            messages.error(request, f"Erreur lors de la cr√©ation: {str(e)}")
    
    return render(request, 'ventes/responsable/vendeuse_form.html', {})

@login_required
def vendeuse_edit(request, pk):
    """Modifier une vendeuse"""
    if request.user.role != 'resp_ventes':
        messages.error(request, "Acc√®s r√©serv√© aux responsables ventes")
        return get_user_dashboard_redirect(request.user)
    
    vendeuse = get_object_or_404(User, pk=pk, role='vendeur')
    
    if request.method == 'POST':
        first_name = request.POST.get('first_name')
        last_name = request.POST.get('last_name')
        email = request.POST.get('email')
        is_active = request.POST.get('is_active') == 'on'
        
        if not all([first_name, last_name, email]):
            messages.error(request, "Veuillez remplir tous les champs obligatoires")
            return render(request, 'ventes/responsable/vendeuse_form.html', {
                'vendeuse': vendeuse,
                'form': request.POST
            })
        
        # V√©rifier si l'email existe d√©j√† (sauf pour cet utilisateur)
        if User.objects.filter(email=email).exclude(pk=pk).exists():
            messages.error(request, "Cet email est d√©j√† utilis√©")
            return render(request, 'ventes/responsable/vendeuse_form.html', {
                'vendeuse': vendeuse,
                'form': request.POST
            })
        
        try:
            vendeuse.first_name = first_name
            vendeuse.last_name = last_name
            vendeuse.email = email
            vendeuse.is_active = is_active
            vendeuse.save()
            
            messages.success(request, f"Vendeuse '{vendeuse.get_full_name()}' modifi√©e avec succ√®s!")
            return redirect('ventes:dashboard_responsable')
        except Exception as e:
            messages.error(request, f"Erreur lors de la modification: {str(e)}")
    
    form_data = {
        'username': {'value': vendeuse.username},
        'first_name': {'value': vendeuse.first_name},
        'last_name': {'value': vendeuse.last_name},
        'email': {'value': vendeuse.email},
        'is_active': {'value': vendeuse.is_active},
    }
    
    return render(request, 'ventes/responsable/vendeuse_form.html', {
        'vendeuse': vendeuse,
        'form': form_data
    })

@login_required
def vendeuse_delete(request, pk):
    """Suppression d'une vendeuse"""
    
    if request.user.role != 'resp_ventes':
        messages.error(request, "Vous n'avez pas les permissions n√©cessaires.")
        return get_user_dashboard_redirect(request.user)
    
    try:
        from users.models import CustomUser
        vendeuse = get_object_or_404(CustomUser, pk=pk, role='vendeur')
        
        if request.method == 'POST':
            vendeuse_nom = vendeuse.get_full_name() or vendeuse.username
            vendeuse.delete()
            messages.success(request, f"La vendeuse {vendeuse_nom} a √©t√© supprim√©e avec succ√®s.")
            return redirect('ventes:dashboard_responsable')
        
        context = {'vendeuse': vendeuse}
        return render(request, 'ventes/responsable/vendeuse_confirm_delete.html', context)
        
    except Http404:
        messages.error(request, "Cette vendeuse n'existe pas ou a d√©j√† √©t√© supprim√©e.")
        return redirect('ventes:dashboard_responsable')
    except Exception as e:
        messages.error(request, f"Erreur lors de la suppression : {str(e)}")
        return redirect('ventes:dashboard_responsable')

@login_required
def supprimer_item_checklist(request, item_id):
    """Supprimer un item d'une checklist avec confirmation si v√©rifi√©"""
    
    if request.method != 'POST':
        return JsonResponse({'error': 'M√©thode non autoris√©e'}, status=405)
    
    item = get_object_or_404(ItemChecklist, id=item_id)
    objet_nom = item.objet.nom
    statut = item.statut_verification
    
    # Si l'item a √©t√© v√©rifi√© (valid√© ou refus√©), demander confirmation
    if item.date_verification and not request.POST.get('force_delete'):
        return JsonResponse({
            'success': False,
            'needs_confirmation': True,
            'message': f"‚ö†Ô∏è L'item '{objet_nom}' a √©t√© {item.get_statut_verification_display().lower()}.\n\nSa suppression cr√©era une alerte pour le v√©rificateur.\n\n√ätes-vous s√ªr de vouloir continuer ?",
            'item_id': item_id,
            'statut': statut
        })
    
    # Suppression confirm√©e ou item jamais v√©rifi√©
    item.delete()
    
    return JsonResponse({
        'success': True,
        'message': f"Item '{objet_nom}' supprim√© avec succ√®s"
    })

# ============ CRUD CONTRATS ============

@login_required
def contrat_list(request):
    """Liste des contrats (onglet Contrats du dashboard)"""
    contrats = Contrat.objects.select_related(
        'maitre_hotel', 'livraison', 'checklist', 'cree_par'
    ).order_by('-date_evenement')
    
    # Filtres optionnels
    status_filter = request.GET.get('status')
    maitre_hotel_filter = request.GET.get('maitre_hotel')
    
    if status_filter:
        contrats = contrats.filter(status=status_filter)
    
    if maitre_hotel_filter:
        contrats = contrats.filter(maitre_hotel_id=maitre_hotel_filter)
    
    # Liste des ma√Ætres d'h√¥tel pour le filtre
    maitres_hotel = User.objects.filter(role='maitre_hotel', is_active=True)
    
    context = {
        'contrats': contrats,
        'maitres_hotel': maitres_hotel,
        'status_choices': Contrat.STATUS_CHOICES,
    }
    
    return render(request, 'ventes/contrats/contrat_list.html', context)

@login_required
def contrat_create_step1(request):
    """√âtape 1: Identifiants + associer un ma√Ætre d'h√¥tel"""
    
    # V√©rifier permissions
    if request.user.role not in ['resp_ventes', 'vendeur']:
        messages.error(request, "Vous n'avez pas la permission de cr√©er un contrat")
        return get_user_dashboard_redirect(request.user)
    
    # Nettoyer la session au d√©but si c'est une nouvelle cr√©ation
    if request.method == 'GET' and 'new' in request.GET:
        if 'contrat_step1' in request.session:
            del request.session['contrat_step1']
        if 'contrat_step2' in request.session:
            del request.session['contrat_step2']
    
    if request.method == 'POST':
        # R√©cup√©rer les donn√©es du formulaire
        numero_contrat_input = request.POST.get('numero_contrat', '').strip()
        nom_evenement = request.POST.get('nom_evenement')
        maitre_hotel_id = request.POST.get('maitre_hotel')
        checklist_id = request.POST.get('checklist')
        livraison_id = request.POST.get('livraison')
        
        # Validation
        if not numero_contrat_input or not nom_evenement:
            messages.error(request, "Le num√©ro de contrat et le nom de l'√©v√©nement sont obligatoires")
            return redirect('ventes:contrat_create_step1')
        
        # Ajouter automatiquement le pr√©fixe CMD-
        numero_contrat = f"CMD-{numero_contrat_input}"
        
        # V√©rifier unicit√© du num√©ro
        if Contrat.objects.filter(numero_contrat=numero_contrat).exists():
            messages.error(request, f"Un contrat avec le num√©ro {numero_contrat} existe d√©j√†")
            return redirect('ventes:contrat_create_step1')
        
        # Stocker en session pour passer √† l'√©tape suivante
        request.session['contrat_step1'] = {
            'numero_contrat': numero_contrat,
            'nom_evenement': nom_evenement,
            'maitre_hotel_id': maitre_hotel_id if maitre_hotel_id else None,
            'checklist_id': checklist_id if checklist_id else None,
            'livraison_id': livraison_id if livraison_id else None,
        }
        
        return redirect('ventes:contrat_create_step2')
    
    # GET - Afficher le formulaire
    maitres_hotel = User.objects.filter(role='maitre_hotel', is_active=True)
    checklists = Checklist.objects.filter(status='validee').order_by('-date_evenement')
    
    # Importer le mod√®le Livraison si disponible
    try:
        from livraison.models import Livraison
        livraisons = Livraison.objects.filter(statut='planifiee').order_by('-date_livraison')
    except:
        livraisons = []
    
    context = {
        'maitres_hotel': maitres_hotel,
        'checklists': checklists,
        'livraisons': livraisons,
    }
    
    return render(request, 'ventes/contrats/contrat_create_step1.html', context)

@login_required
def contrat_create_step2(request):
    """√âtape 2: Informations client + Adresse + Date/heure + Infos suppl√©mentaires"""
    
    # V√©rifier que l'√©tape 1 est compl√©t√©e
    if 'contrat_step1' not in request.session:
        messages.warning(request, "Veuillez d'abord compl√©ter l'√©tape 1")
        return redirect('ventes:contrat_create_step1')
    
    if request.method == 'POST':
        # R√©cup√©rer toutes les donn√©es
        step2_data = {
            'client_nom': request.POST.get('client_nom'),
            'client_telephone': request.POST.get('client_telephone'),
            'client_email': request.POST.get('client_email', ''),
            'contact_sur_site': request.POST.get('contact_sur_site', ''),
            'adresse_complete': request.POST.get('adresse_complete'),
            'ville': request.POST.get('ville', 'Montr√©al'),
            'code_postal': request.POST.get('code_postal', ''),
            'date_evenement': request.POST.get('date_evenement'),
            'heure_debut_prevue': request.POST.get('heure_debut_prevue'),
            'heure_fin_prevue': request.POST.get('heure_fin_prevue'),
            'nb_convives': request.POST.get('nb_convives', 0),
            'informations_supplementaires': request.POST.get('informations_supplementaires', ''),
            'instructions_speciales': request.POST.get('instructions_speciales', ''),
        }
        
        # Validation
        required_fields = ['client_nom', 'client_telephone', 'adresse_complete', 
                          'date_evenement', 'heure_debut_prevue', 'heure_fin_prevue']
        
        if not all(step2_data.get(field) for field in required_fields):
            messages.error(request, "Veuillez remplir tous les champs obligatoires")
            context = {
                'form_data': step2_data,
                'google_api_key': settings.GOOGLE_MAPS_API_KEY,
            }
            return render(request, 'ventes/contrats/contrat_create_step2.html', context)
        
        # Stocker en session
        request.session['contrat_step2'] = step2_data
        
        return redirect('ventes:contrat_create_step3')
    
    # GET - Afficher le formulaire
    form_data = request.session.get('contrat_step2', {})
    
    # Si pas de donn√©es en session, utiliser les valeurs par d√©faut de la checklist (si existe)
    if not form_data:
        step1 = request.session.get('contrat_step1', {})
        if step1.get('checklist_id'):
            try:
                checklist = Checklist.objects.get(pk=step1['checklist_id'])
                form_data = {
                    'date_evenement': checklist.date_evenement.strftime('%Y-%m-%d'),
                    'ville': 'Montr√©al',
                    'informations_supplementaires': checklist.notes if checklist.notes else '',
                }
            except:
                pass
    
    context = {
        'form_data': form_data,
        'google_api_key': settings.GOOGLE_MAPS_API_KEY,
    }
    
    return render(request, 'ventes/contrats/contrat_create_step2.html', context)

@login_required
def contrat_create_step3(request):
    """√âtape 3: D√©roul√© de l'√©v√©nement + Confirmation avec r√©sum√©"""
    
    # V√©rifier que les √©tapes pr√©c√©dentes sont compl√©t√©es
    if 'contrat_step1' not in request.session or 'contrat_step2' not in request.session:
        messages.warning(request, "Veuillez compl√©ter les √©tapes pr√©c√©dentes")
        return redirect('ventes:contrat_create_step1')
    
    if request.method == 'POST':
        deroule_evenement = request.POST.get('deroule_evenement', '')
        
        # R√©cup√©rer toutes les donn√©es des √©tapes pr√©c√©dentes
        step1 = request.session.get('contrat_step1')
        step2 = request.session.get('contrat_step2')
        
        try:
            # Cr√©er le contrat
            contrat = Contrat.objects.create(
                # √âtape 1
                numero_contrat=step1['numero_contrat'],
                nom_evenement=step1['nom_evenement'],
                maitre_hotel_id=step1.get('maitre_hotel_id'),
                checklist_id=step1.get('checklist_id'),
                livraison_id=step1.get('livraison_id'),
                
                # √âtape 2
                client_nom=step2['client_nom'],
                client_telephone=step2['client_telephone'],
                client_email=step2.get('client_email', ''),
                contact_sur_site=step2.get('contact_sur_site', ''),
                adresse_complete=step2['adresse_complete'],
                ville=step2.get('ville', 'Montr√©al'),
                code_postal=step2.get('code_postal', ''),
                date_evenement=step2['date_evenement'],
                heure_debut_prevue=step2['heure_debut_prevue'],
                heure_fin_prevue=step2['heure_fin_prevue'],
                nb_convives=int(step2.get('nb_convives', 0)),
                informations_supplementaires=step2.get('informations_supplementaires', ''),
                instructions_speciales=step2.get('instructions_speciales', ''),
                
                # √âtape 3
                deroule_evenement=deroule_evenement,
                
                # Metadata
                cree_par=request.user,
                status='planifie'
            )
            
            # Cr√©er l'historique
            HistoriqueContrat.objects.create(
                contrat=contrat,
                type_action='creation',
                description=f"Contrat cr√©√© par {request.user.get_full_name()}",
                effectue_par=request.user
            )
            
            # Nettoyer la session
            del request.session['contrat_step1']
            del request.session['contrat_step2']
            
            messages.success(request, f"‚úÖ Contrat {contrat.numero_contrat} cr√©√© avec succ√®s!")
            return redirect('ventes:contrat_detail', pk=contrat.pk)
        
        except Exception as e:
            messages.error(request, f"Erreur lors de la cr√©ation du contrat: {str(e)}")
            import traceback
            traceback.print_exc()
    
    # GET - Afficher le r√©sum√© et le formulaire de d√©roul√©
    step1 = request.session.get('contrat_step1')
    step2 = request.session.get('contrat_step2')
    
    # R√©cup√©rer les objets li√©s pour l'affichage
    maitre_hotel = None
    if step1.get('maitre_hotel_id'):
        try:
            maitre_hotel = User.objects.get(pk=step1['maitre_hotel_id'])
        except:
            pass
    
    checklist = None
    if step1.get('checklist_id'):
        try:
            checklist = Checklist.objects.get(pk=step1['checklist_id'])
        except:
            pass
    
    context = {
        'step1': step1,
        'step2': step2,
        'maitre_hotel': maitre_hotel,
        'checklist': checklist,
    }
    
    return render(request, 'ventes/contrats/contrat_create_step3.html', context)

@login_required
def contrat_detail(request, pk):
    """D√©tail d'un contrat"""
    contrat = get_object_or_404(
        Contrat.objects.select_related(
            'maitre_hotel', 'checklist', 'livraison', 'cree_par'
        ).prefetch_related('photos', 'historique'),
        pk=pk
    )
    
    photos = contrat.photos.all()
    historique = contrat.historique.all()[:10]
    
    context = {
        'contrat': contrat,
        'photos': photos,
        'historique': historique,
        'can_edit': request.user.role in ['resp_ventes', 'maitre_hotel'],
    }
    
    return render(request, 'ventes/contrats/contrat_detail.html', context)

@login_required
def contrat_edit(request, pk):
    """Modifier un contrat (formulaire tout-en-un)"""
    contrat = get_object_or_404(Contrat, pk=pk)
    
    # V√©rifier permissions
    if request.user.role not in ['resp_ventes', 'maitre_hotel']:
        messages.error(request, "Vous n'avez pas la permission de modifier ce contrat")
        return redirect('ventes:contrat_detail', pk=pk)
    
    if request.method == 'POST':
        try:
            # Mise √† jour des champs
            contrat.nom_evenement = request.POST.get('nom_evenement')
            contrat.maitre_hotel_id = request.POST.get('maitre_hotel') or None
            contrat.client_nom = request.POST.get('client_nom')
            contrat.client_telephone = request.POST.get('client_telephone')
            contrat.client_email = request.POST.get('client_email', '')
            contrat.contact_sur_site = request.POST.get('contact_sur_site', '')
            contrat.adresse_complete = request.POST.get('adresse_complete')
            contrat.ville = request.POST.get('ville', 'Montr√©al')
            contrat.code_postal = request.POST.get('code_postal', '')
            contrat.date_evenement = request.POST.get('date_evenement')
            contrat.heure_debut_prevue = request.POST.get('heure_debut_prevue')
            contrat.heure_fin_prevue = request.POST.get('heure_fin_prevue')
            contrat.nb_convives = int(request.POST.get('nb_convives', 0))
            contrat.deroule_evenement = request.POST.get('deroule_evenement', '')
            contrat.informations_supplementaires = request.POST.get('informations_supplementaires', '')
            contrat.instructions_speciales = request.POST.get('instructions_speciales', '')
            
            contrat.save()
            
            # Historique
            HistoriqueContrat.objects.create(
                contrat=contrat,
                type_action='modification',
                description=f"Contrat modifi√© par {request.user.get_full_name()}",
                effectue_par=request.user
            )
            
            messages.success(request, "‚úÖ Contrat modifi√© avec succ√®s!")
            return redirect('ventes:contrat_detail', pk=pk)
        
        except Exception as e:
            messages.error(request, f"Erreur lors de la modification: {str(e)}")
    
    # GET
    maitres_hotel = User.objects.filter(role='maitre_hotel', is_active=True)
    
    context = {
        'contrat': contrat,
        'maitres_hotel': maitres_hotel,
    }
    
    return render(request, 'ventes/contrats/contrat_edit.html', context)

@login_required
def contrat_delete(request, pk):
    """Supprimer un contrat"""
    contrat = get_object_or_404(Contrat, pk=pk)
    
    # V√©rifier permissions
    if request.user.role != 'resp_ventes':
        messages.error(request, "Seuls les responsables peuvent supprimer un contrat")
        return redirect('ventes:contrat_detail', pk=pk)
    
    if request.method == 'POST':
        numero = contrat.numero_contrat
        contrat.delete()
        messages.success(request, f"Contrat {numero} supprim√© avec succ√®s")
        return get_user_dashboard_redirect(request.user)
    
    context = {'contrat': contrat}
    return render(request, 'ventes/contrats/contrat_confirm_delete.html', context)

@login_required
def contrat_from_checklist(request, checklist_id):
    """Cr√©er un contrat √† partir d'une checklist existante"""
    
    checklist = get_object_or_404(Checklist, pk=checklist_id)
    
    # Extraire le num√©ro (avec ou sans pr√©fixe)
    numero_commande = checklist.numero_commande.strip()
    
    # Si le num√©ro commence d√©j√† par CMD-, on le garde tel quel
    if not numero_commande.startswith('CMD-'):
        numero_avec_prefix = f"CMD-{numero_commande}"
    else:
        numero_avec_prefix = numero_commande
    
    request.session['contrat_step1'] = {
        'numero_contrat': numero_avec_prefix,
        'nom_evenement': checklist.nom,
        'maitre_hotel_id': None,
        'checklist_id': str(checklist.id),
        'livraison_id': str(checklist.livraison.id) if checklist.livraison else None,
    }
    
    # Pr√©-remplir l'√©tape 2 avec la date de l'√©v√©nement
    request.session['contrat_step2'] = {
        'client_nom': '',
        'client_telephone': '',
        'client_email': '',
        'contact_sur_site': '',
        'adresse_complete': '',
        'ville': 'Montr√©al',
        'code_postal': '',
        'date_evenement': checklist.date_evenement.strftime('%Y-%m-%d'),
        'heure_debut_prevue': '',
        'heure_fin_prevue': '',
        'nb_convives': 0,
        'informations_supplementaires': checklist.notes if checklist.notes else '',
        'instructions_speciales': '',
    }
    
    messages.info(request, f"Cr√©ation d'un contrat bas√© sur la checklist {checklist.numero_commande}")
    
    # Rediriger vers l'√©tape 2 (puisque l'√©tape 1 est d√©j√† pr√©-remplie)
    return redirect('ventes:contrat_create_step2')

# ============ CRUD SOUMISSIONS ============

@login_required
def soumission_list(request):
    """Liste des soumissions (pour l'onglet dans dashboard_responsable)"""
    soumissions = Soumission.objects.select_related('cree_par').order_by('-date_evenement')
    
    # Filtres optionnels
    statut_filter = request.GET.get('statut')
    if statut_filter:
        soumissions = soumissions.filter(statut=statut_filter)
    
    context = {
        'soumissions': soumissions,
        'statut_choices': Soumission.STATUT_CHOICES,
    }
    
    return render(request, 'ventes/soumissions/soumission_list.html', context)

@login_required
def soumission_create(request):
    """Cr√©er une nouvelle soumission"""
    if request.user.role not in ['resp_ventes', 'vendeur']:
        messages.error(request, "Vous n'avez pas la permission de cr√©er une soumission")
        return get_user_dashboard_redirect(request.user)
    
    if request.method == 'POST':
        nom_compagnie = request.POST.get('nom_compagnie')
        date_evenement = request.POST.get('date_evenement')
        nombre_personnes = request.POST.get('nombre_personnes')
        adresse = request.POST.get('adresse')
        avec_service = request.POST.get('avec_service') == 'on'
        location_materiel = request.POST.get('location_materiel') == 'on'
        avec_alcool = request.POST.get('avec_alcool') == 'on'
        commande_par = request.POST.get('commande_par')
        email = request.POST.get('email')
        telephone = request.POST.get('telephone')
        notes = request.POST.get('notes', '')
        
        # Validation
        if not all([nom_compagnie, date_evenement, nombre_personnes, 
                   adresse, commande_par, email, telephone]):
            messages.error(request, "Veuillez remplir tous les champs obligatoires")
            context = {
                'form_data': request.POST,
                'google_api_key': settings.GOOGLE_MAPS_API_KEY,
            }
            return render(request, 'ventes/soumissions/soumission_form.html', context)
        
        try:
            soumission = Soumission.objects.create(
                nom_compagnie=nom_compagnie,
                date_evenement=date_evenement,
                nombre_personnes=int(nombre_personnes),
                adresse=adresse,
                avec_service=avec_service,
                location_materiel=location_materiel,
                avec_alcool=avec_alcool,
                commande_par=commande_par,
                email=email,
                telephone=telephone,
                notes=notes,
                cree_par=request.user,
                statut='en_cours'
            )
            
            messages.success(request, f"‚úÖ Soumission {soumission.numero_soumission} cr√©√©e avec succ√®s!")
            return redirect('ventes:soumission_detail', pk=soumission.pk)
        
        except Exception as e:
            messages.error(request, f"Erreur lors de la cr√©ation: {str(e)}")
            import traceback
            traceback.print_exc()
    
    context = {
        'google_api_key': settings.GOOGLE_MAPS_API_KEY,
    }
    return render(request, 'ventes/soumissions/soumission_form.html', context)

@login_required
def soumission_edit(request, pk):
    """Modifier une soumission"""
    soumission = get_object_or_404(Soumission, pk=pk)
    
    # V√©rifier permissions
    if request.user.role not in ['resp_ventes', 'vendeur']:
        messages.error(request, "Vous n'avez pas la permission de modifier cette soumission")
        return redirect('ventes:soumission_detail', pk=pk)
    
    # Une vendeuse ne peut modifier que ses propres soumissions
    if request.user.role == 'vendeur' and soumission.cree_par != request.user:
        messages.error(request, "Vous ne pouvez modifier que vos propres soumissions")
        return redirect('ventes:soumission_detail', pk=pk)
    
    # R√©cup√©rer tous les vendeurs pour la liste d√©roulante (uniquement pour resp_ventes)
    vendeurs = []
    if request.user.role == 'resp_ventes':
        vendeurs = User.objects.filter(
            role__in=['vendeur', 'resp_ventes']
        ).order_by('first_name', 'last_name', 'username')
    
    if request.method == 'POST':
        nom_compagnie = request.POST.get('nom_compagnie')
        date_evenement = request.POST.get('date_evenement')
        nombre_personnes = request.POST.get('nombre_personnes')
        adresse = request.POST.get('adresse')
        avec_service = request.POST.get('avec_service') == 'on'
        location_materiel = request.POST.get('location_materiel') == 'on'
        avec_alcool = request.POST.get('avec_alcool') == 'on'
        commande_par = request.POST.get('commande_par')
        email = request.POST.get('email')
        telephone = request.POST.get('telephone')
        notes = request.POST.get('notes', '')
        statut = request.POST.get('statut', soumission.statut)
        
        # Validation
        if not all([nom_compagnie, date_evenement, nombre_personnes, adresse, 
                   commande_par, email, telephone]):
            messages.error(request, "Veuillez remplir tous les champs obligatoires")
            context = {
                'soumission': soumission,
                'vendeurs': vendeurs,
                'can_edit': True,
                'google_api_key': settings.GOOGLE_MAPS_API_KEY,
            }
            return render(request, 'ventes/soumissions/soumission_form.html', context)
        
        try:
            # R√©assignation (uniquement pour resp_ventes)
            if request.user.role == 'resp_ventes':
                nouveau_vendeur_id = request.POST.get('cree_par')
                if nouveau_vendeur_id:
                    try:
                        nouveau_vendeur = User.objects.get(id=nouveau_vendeur_id)
                        if soumission.cree_par != nouveau_vendeur:
                            ancien_vendeur = soumission.cree_par
                            soumission.cree_par = nouveau_vendeur
                            messages.info(
                                request, 
                                f"üìã Soumission r√©assign√©e de {ancien_vendeur.get_full_name() or ancien_vendeur.username} "
                                f"√† {nouveau_vendeur.get_full_name() or nouveau_vendeur.username}"
                            )
                    except User.DoesNotExist:
                        messages.warning(request, "Vendeur non trouv√©. La soumission n'a pas √©t√© r√©assign√©e.")
            
            # Mise √† jour des champs
            soumission.nom_compagnie = nom_compagnie
            soumission.date_evenement = date_evenement
            soumission.nombre_personnes = int(nombre_personnes)
            soumission.adresse = adresse
            soumission.avec_service = avec_service
            soumission.location_materiel = location_materiel
            soumission.avec_alcool = avec_alcool
            soumission.commande_par = commande_par
            soumission.email = email
            soumission.telephone = telephone
            soumission.notes = notes
            soumission.statut = statut
            soumission.save()
            
            messages.success(request, "‚úÖ Soumission modifi√©e avec succ√®s!")
            return redirect('ventes:soumission_detail', pk=pk)
        
        except Exception as e:
            messages.error(request, f"Erreur lors de la modification: {str(e)}")
    
    context = {
        'soumission': soumission,
        'vendeurs': vendeurs,
        'can_edit': True,
        'google_api_key': settings.GOOGLE_MAPS_API_KEY,
    }
    return render(request, 'ventes/soumissions/soumission_form.html', context)


@login_required
def soumission_detail(request, pk):
    """D√©tail d'une soumission"""
    soumission = get_object_or_404(
        Soumission.objects.select_related('cree_par'),
        pk=pk
    )
    
    context = {
        'soumission': soumission,
        'can_edit': request.user.role in ['resp_ventes', 'vendeur'],
    }
    
    return render(request, 'ventes/soumissions/soumission_detail.html', context)

@login_required
def soumission_delete(request, pk):
    """Supprimer une soumission"""
    soumission = get_object_or_404(Soumission, pk=pk)
    
    # V√©rifier permissions
    if request.user.role != 'resp_ventes':
        messages.error(request, "Seuls les responsables peuvent supprimer une soumission")
        return redirect('ventes:soumission_detail', pk=pk)
    
    if request.method == 'POST':
        numero = soumission.numero_soumission
        soumission.delete()
        messages.success(request, f"Soumission {numero} supprim√©e avec succ√®s")
        return get_user_dashboard_redirect(request.user)
    
    context = {'soumission': soumission}
    return render(request, 'ventes/soumissions/soumission_confirm_delete.html', context)

@login_required
def soumission_duplicate(request, pk):
    """Dupliquer une soumission"""
    original = get_object_or_404(Soumission, pk=pk)
    
    try:
        # Ne pas sp√©cifier de num√©ro, il sera auto-g√©n√©r√©
        nouvelle_soumission = Soumission.objects.create(
            nom_compagnie=original.nom_compagnie,
            date_evenement=original.date_evenement,
            nombre_personnes=original.nombre_personnes,
            adresse=original.adresse,
            avec_service=original.avec_service,
            location_materiel=original.location_materiel,
            avec_alcool=original.avec_alcool,
            commande_par=original.commande_par,
            email=original.email,
            telephone=original.telephone,
            notes=original.notes,
            notes_client=original.notes_client,
            cree_par=request.user,
            statut='en_cours'
        )
        
        messages.success(request, f"Soumission dupliqu√©e avec succ√®s! Nouveau num√©ro: {nouvelle_soumission.numero_soumission}")
        return redirect('ventes:soumission_detail', pk=nouvelle_soumission.pk)
    
    except Exception as e:
        messages.error(request, f"Erreur lors de la duplication: {str(e)}")
        return redirect('ventes:soumission_detail', pk=pk)

@login_required
def soumission_envoyer(request, pk):
    """Marquer une soumission comme envoy√©e"""
    soumission = get_object_or_404(Soumission, pk=pk)
    
    if request.method == 'POST':
        soumission.envoyer()
        messages.success(request, f"Soumission {soumission.numero_soumission} marqu√©e comme envoy√©e!")
        return redirect('ventes:soumission_detail', pk=pk)
    
    return redirect('ventes:soumission_detail', pk=pk)

@login_required
def soumission_accepter(request, pk):
    """Marquer une soumission comme accept√©e"""
    if request.method == 'POST':
        soumission = get_object_or_404(Soumission, pk=pk)
        
        # V√©rifier permissions
        if request.user.role not in ['resp_ventes', 'vendeur']:
            messages.error(request, "Vous n'avez pas la permission de modifier cette soumission")
            return redirect('ventes:soumission_detail', pk=pk)
        
        soumission.accepter()
        messages.success(request, f"‚úÖ Soumission {soumission.numero_soumission} marqu√©e comme accept√©e!")
        return redirect('ventes:soumission_detail', pk=pk)
    
    return redirect('ventes:soumission_detail', pk=pk)

@login_required
def soumission_refuser(request, pk):
    """Marquer une soumission comme refus√©e"""
    if request.method == 'POST':
        soumission = get_object_or_404(Soumission, pk=pk)
        
        # V√©rifier permissions
        if request.user.role not in ['resp_ventes', 'vendeur']:
            messages.error(request, "Vous n'avez pas la permission de modifier cette soumission")
            return redirect('ventes:soumission_detail', pk=pk)
        
        soumission.refuser()
        messages.warning(request, f"‚ùå Soumission {soumission.numero_soumission} marqu√©e comme refus√©e")
        return redirect('ventes:soumission_detail', pk=pk)
    
    return redirect('ventes:soumission_detail', pk=pk)

@login_required
def item_add_comment(request, item_id):
    """Ajouter/modifier un commentaire sur un item"""
    if request.method != 'POST':
        return JsonResponse({'error': 'M√©thode non autoris√©e'}, status=405)
    
    item = get_object_or_404(ItemChecklist, id=item_id)
    
    # V√©rifier les permissions
    if not (request.user.role in ['resp_ventes', 'vendeur'] or 
            item.checklist.creee_par == request.user):
        return JsonResponse({'error': 'Permission refus√©e'}, status=403)
    
    commentaire = request.POST.get('commentaire', '').strip()
    
    try:
        item.notes = commentaire
        item.save()
        
        return JsonResponse({
            'success': True,
            'message': 'Commentaire enregistr√©',
            'commentaire': commentaire
        })
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)